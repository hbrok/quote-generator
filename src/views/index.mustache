{{ %FILTERS }}
<!doctype html>
<html class="no-js" lang="en">
    <head>
        <meta charset="utf-8">
        <meta http-equiv="x-ua-compatible" content="ie=edge">
        <title>Quotes</title>
        <meta name="description" content="">
        <meta name="viewport" content="width=device-width, initial-scale=1">

        <link rel="stylesheet" href="css/main.css">
        <link rel="stylesheet" type="text/css" href="https://fonts.googleapis.com/css?family={{ font }}&text={{ unique_chars }}&subset=latin">

        <!-- <script src="bower_components/requirejs/require.js" async></script> -->
        <!-- <script> -->
            <!-- require.config({ -->
                <!-- paths: { -->
                    <!-- "jquery": "bower_components/jquery/src", -->
                    <!-- "sizzle": "bower_components/jquery/src/sizzle/dist/sizzle" -->
                <!-- } -->
            <!-- }); -->
            <!-- require([ "app" ]); -->
        <!-- </script> -->

        <!-- Dynamic CSS. -->
        <style>
            .quote-text {
                font-family: "{{ font }}";
            }

            a:hover,
            .quote-link,
            ::selection,
            .button,
            .button.hollow:hover {
                color: #{{ color_one }};
            }

            body,
            .quote-link:hover {
                background-color: #{{ color_one }};
            }

            body,
            a,
            .quote-link:hover,
            .button:hover,
            .button.hollow,
            .footer {
                color: #{{ color_two }};
            }

            body,
            .actions,
            .footer,
            .button:hover,
            .button.hollow {
                border-color: #{{ color_two }};
            }

            a:hover,
            .quote-link,
            ::selection,
            .button,
            .button.hollow:hover {
                background-color: #{{ color_two }};
            }
        </style>
    </head>

    <body data-font="{{ font }}" data-color-one="{{ color_one }}" data-color-two="{{ color_two }}">
        <main class="main-content">
            <blockquote class="quote">
                <p id="js-quote-text" class="quote-text">{{ quote.quoteText }}</p>
                <footer class="quote-attribution">
                    <a class="button" href="{{ quote.quoteLink }}">
                        <span id="js-quote-author" class="quote-author">{{ quote.quoteAuthor }}</span>
                    </a>
                </footer>
                Sources:
                <a id="js-quote-link" href="{{ quote.quoteLink }}">quote</a> |
                <a href="https://fonts.google.com/specimen/{{ font | urlencode }}">font</a>
            </blockquote>

            <div class="actions">
                <p>Generate quote with:</p>
                <a id="js-new-font" class="button hollow" href="{{ quoteLink.font }}">New Font</a>
                <a id="js-new-colors" class="button hollow" href="{{ quoteLink.colors }}">New Colors</a>
                <a id="js-new-quote" class="button hollow" href="{{ quoteLink.quote }}">New Quote</a>

                <p>What do you think about this accessible color combination?</p>
                <a class="button" href="http://randoma11y.com/#/?hex={{ color_one }}&compare={{ color_two }}">Vote on these colors</a>
            </div>
        </main>

        <footer class="footer">
            <p class="colophon">
                Colors: <a href="http://www.randoma11y.com/">randoma11y.com</a> |
                Quotes: <a href="http://forismatic.com/">forismatic.com</a><br>
                Made for <a href="https://a-k-apart.com/">10k Apart</a>
            </p>
        </footer>

        <!-- Scripts! -->
        <script>
            // console.log('hi');

            /**
             * foreach function for querySelectorAll elements.
             */
            function forEach(array, callback, scope) {
              for (var i = 0; i < array.length; i++) {
                callback.call(scope, i, array[i]); // passes back stuff we need
              }
            };

            function contains(arr, v) {
                for(var i = 0; i < arr.length; i++) {
                    if(arr[i] === v) return true;
                }
                return false;
            };

            function unique(str) {
                var arr = [];
                for(var i = 0; i < str.length; i++) {
                    if(!contains(arr, str[i])) {
                        arr.push(str[i]);
                    }
                }
                return arr;
            }

            // Set default font.
            var font = document.querySelector('body').getAttribute('data-font');
            var requestType = '';

            var pokeApiUrl = 'http://pokeapi.co/api/v2/ability/4/';
            var randoma11yUrl = 'http://www.randoma11y.com/stats/';
            var forismaticUrl = 'https://crossorigin.me/http://api.forismatic.com/api/1.0/?method=getQuote&lang=en&format=json';

            // var favsUrl = 'https://favqs.com/api/quotes';
            // var favsToken = 'c518ff9cd8895ad60675ccd57ed4fe8b';

            var fontsUrl = '/src/font-list.json';

            var combos = 113592;
            var colorsURL = 'http://www.randoma11y.com/stats/';
            var colorsPageURL = 'http://randoma11y.com/combos?';


            var quoteText = document.getElementById('js-quote-text');
            var quoteAuthor = document.getElementById('js-quote-author');
            var quoteLink = document.getElementById('js-quote-link');



            var buttons = document.querySelectorAll('.button');

            forEach(buttons, function (index, value) {
            //   console.log(index, value); // passes index + value back!
              buttons[index].addEventListener('click', function(e){ //say this is an anchor
                       //do something
                      e.preventDefault();
                 });
            });


            var newFont = document.getElementById('js-new-font');
            // console.log(newFont);
            newFont.addEventListener('click', function(e) {
                requestType = 'font';
                callOtherDomain( fontsUrl );
            });



            var newQuote = document.getElementById('js-new-quote');
            // console.log(newQuote);
            newQuote.addEventListener('click', function(e) {
                requestType = 'quote';
                callOtherDomain( forismaticUrl );
            });

            var newColors = document.getElementById('js-new-colors');
            // console.log(newQuote);
            newColors.addEventListener('click', function(e) {
                requestType = 'colors';
                callOtherDomain( colorsPageURL );
            });




            var invocation = new XMLHttpRequest();

            function callOtherDomain( url ) {
                if(invocation) {
                    invocation.open('GET', url, true);
                    invocation.onreadystatechange = handler;
                    invocation.send();
                }
            }

            function handler( evtXHR ) {
                // console.log(invocation.status);

                if (invocation.readyState === XMLHttpRequest.DONE) {
                    if (invocation.status === 200) {

                        // var response = invocation.responseText;
                        // response = response.replace('\'', ''); // todo figure this out.....
                        // console.log(response);
                        // response = JSON.parse(response);

                        var response = JSON.parse(invocation.responseText.replace("\\'", "'"));
                        // console.log(response);

                        switch (requestType) {
                            case 'quote':
                                quoteText.innerHTML = response.quoteText;
                                quoteAuthor.innerHTML = response.quoteAuthor;
                                getNewFont();
                                break;

                            case 'font':
                                var numFonts = response.items.length;
                                font = response.items[getRandomInt(0, numFonts)].family;
                                getNewFont();
                                break;

                            case 'colors':
                                console.log(response);
                                var numPairs = response.length;
                                var pair = response[getRandomInt(0, numPairs)];
                                var colorOne = pair.color_one;
                                var colorTwo = pair.color_two;
                                console.log(colorOne);
                                console.log(colorTwo);
                                break;

                            default:
                                alert('No request type set.');
                                break;
                        }


                        // quote = response;

                    } else {
                        alert('There was a problem with the request.');
                    }
                }

            }


            function getNewFont(response) {
                console.log(response);
                // console.log(response.items.length);
                console.log(font);
                loadFont(font);
                quoteText.style.fontFamily = font;
            }


            function getUniqueChars() {
                console.log(quoteText.innerHTML);
                console.log(unique(quoteText.innerHTML).join(''));
                return unique(quoteText.innerHTML).join('');
            }


            // Load a Google font by name.
            function loadFont(font) {
              WebFontConfig = {
                  google: {
                    families: [font],
                    text: getUniqueChars()
                  },
                  timeout: 2000 // Set the timeout to two seconds
                };

              (function(d) {
                  var wf = d.createElement('script'), s = d.scripts[0];
                  wf.src = 'https://ajax.googleapis.com/ajax/libs/webfont/1.6.16/webfont.js';
                  s.parentNode.insertBefore(wf, s);
               })(document);
            };


            /**
             * Returns a random integer between min (included) and max (included)
             * Using Math.round() will give you a non-uniform distribution!
             * @link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/random#Examples
             */
            function getRandomInt(min, max) {
              min = Math.ceil(min);
              max = Math.floor(max);
              return Math.floor(Math.random() * (max - min)) + min;
            }






        </script>
    </body>
</html>
