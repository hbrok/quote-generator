{{ %FILTERS }}
<!doctype html>
<html class="no-js" lang="en">
    <head>
        <meta charset="utf-8">
        <meta http-equiv="x-ua-compatible" content="ie=edge">
        <title>Quotes</title>
        <meta name="description" content="">
        <meta name="viewport" content="width=device-width, initial-scale=1">

        <link rel="stylesheet" href="css/main.css">
        <link rel="stylesheet" type="text/css" href="https://fonts.googleapis.com/css?family={{ font }}&text={{ unique_chars }}&subset=latin">

        <!-- <script src="bower_components/requirejs/require.js" async></script> -->
        <!-- <script> -->
            <!-- require.config({ -->
                <!-- paths: { -->
                    <!-- "jquery": "bower_components/jquery/src", -->
                    <!-- "sizzle": "bower_components/jquery/src/sizzle/dist/sizzle" -->
                <!-- } -->
            <!-- }); -->
            <!-- require([ "app" ]); -->
        <!-- </script> -->

        <!-- Dynamic CSS. -->
        <style>
            .quote-text {
                font-family: "{{ font }}";
            }

            a:hover,
            .quote-link,
            ::selection,
            .button,
            .button.hollow:hover {
                color: #{{ color_one }};
            }

            body,
            .quote-link:hover {
                background-color: #{{ color_one }};
            }

            body,
            a,
            .quote-link:hover,
            .button:hover,
            .button.hollow,
            .footer {
                color: #{{ color_two }};
            }

            body,
            .actions,
            .footer,
            .button:hover,
            .button.hollow {
                border-color: #{{ color_two }};
            }

            a:hover,
            .quote-link,
            ::selection,
            .button,
            .button.hollow:hover {
                background-color: #{{ color_two }};
            }
        </style>
    </head>

    <body>
        <main class="main-content">
            <blockquote class="quote">
                <p id="js-quote-text" class="quote-text">{{ quote.quoteText }}</p>
                <footer class="quote-attribution">
                    <a class="button" href="{{ quote.quoteLink }}">
                        <span id="js-quote-author" class="quote-author">{{ quote.quoteAuthor }}</span>
                    </a>
                </footer>
                Sources:
                <a id="js-quote-link" href="{{ quote.quoteLink }}">quote</a> |
                <a href="https://fonts.google.com/specimen/{{ font | urlencode }}">font</a>
            </blockquote>

            <div class="actions">
                <p>Generate quote with:</p>
                <a id="js-new-font" class="button hollow" href="{{ quoteLink.font }}">New Font</a>
                <a id="js-new-colors" class="button hollow" href="{{ quoteLink.colors }}">New Colors</a>
                <a id="js-new-quote" class="button hollow" href="{{ quoteLink.quote }}">New Quote</a>

                <p>What do you think about this accessible color combination?</p>
                <a class="button" href="http://randoma11y.com/#/?hex={{ color_one }}&compare={{ color_two }}">Vote on these colors</a>
            </div>
        </main>

        <footer class="footer">
            <p class="colophon">
                Colors: <a href="http://www.randoma11y.com/">randoma11y.com</a> |
                Quotes: <a href="http://forismatic.com/">forismatic.com</a><br>
                Made for <a href="https://a-k-apart.com/">10k Apart</a>
            </p>
        </footer>

        <!-- Scritps! -->
        <script>
            console.log('hi');

            var pokeApiUrl = 'http://pokeapi.co/api/v2/ability/4/';
            var randoma11yUrl = 'http://www.randoma11y.com/stats/';
            var forismaticUrl = 'https://crossorigin.me/http://api.forismatic.com/api/1.0/?method=getQuote&lang=en&format=json';

            var quoteText = document.getElementById('js-quote-text');
            var quoteAuthor = document.getElementById('js-quote-author');
            var quoteLink = document.getElementById('js-quote-link');

            // for each function.
            var forEach = function (array, callback, scope) {
              for (var i = 0; i < array.length; i++) {
                callback.call(scope, i, array[i]); // passes back stuff we need
              }
            };

            var buttons = document.querySelectorAll('.button');

            forEach(buttons, function (index, value) {
              console.log(index, value); // passes index + value back!
              buttons[index].addEventListener('click', function(e){ //say this is an anchor
                       //do something
                      e.preventDefault();
                 });
            });


            var newFont = document.getElementById('js-new-font');
            console.log(newFont);
            newFont.addEventListener('click', function(e) {
                // callOtherDomain();
            });


            var newQuote = document.getElementById('js-new-quote');
            console.log(newQuote);
            newQuote.addEventListener('click', function(e) {
                // fetchNewQuote();
                callOtherDomain( forismaticUrl );
            });



            var fetchNewQuote = function () {
                // var response = callOtherDomain( forismaticUrl );
                console.log(invocation.responseText);
            };



            var invocation = new XMLHttpRequest();

            function callOtherDomain( url ) {
                if(invocation) {
                    invocation.open('GET', url, true);
                    invocation.onreadystatechange = handler;
                    invocation.send();
                }
            }

            function handler( evtXHR ) {
                console.log(invocation.status);

                if (invocation.readyState == 4) {
                    if (invocation.status == 200) {
                        // console.log(invocation.responseText);
                        // return invocation.responseText;
                        fetchNewQuote();
                    } else {
                        console.log('Invocation Errors Occured');
                        // return false;
                    }
                }
            }


            // callOtherDomain();
        </script>
    </body>
</html>
